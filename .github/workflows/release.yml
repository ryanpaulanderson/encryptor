name: CD

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            vendor
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo-audit
        id: cache-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo-audit
        if: steps.cache-audit.outputs.cache-hit != 'true'
        run: cargo install --version ^0.17 cargo-audit
      - run: cargo fmt -- --check
      - run: cargo clippy -- -D warnings
      - run: cargo test --offline
      - run: cargo audit --locked --deny warnings
      - run: cargo build --release
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-x86_64
          path: target/release/chacha20_poly1305

  build-macos-x86:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            vendor
          key: macos-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo-audit
        id: cache-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: macos-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo-audit
        if: steps.cache-audit.outputs.cache-hit != 'true'
        run: cargo install --version ^0.17 cargo-audit
      - run: cargo fmt -- --check
      - run: cargo clippy -- -D warnings
      - run: cargo test --offline
      - run: cargo audit --locked --deny warnings
      - run: cargo build --release
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-x86_64
          path: target/release/chacha20_poly1305

  build-macos-arm:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            vendor
          key: macos-arm-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo-audit
        id: cache-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: macos-arm-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo-audit
        if: steps.cache-audit.outputs.cache-hit != 'true'
        run: cargo install --version ^0.17 cargo-audit
      - run: rustup target add aarch64-apple-darwin
      - run: cargo fmt -- --check
      - run: cargo clippy -- -D warnings
      - run: cargo test --offline
      - run: cargo audit --locked --deny warnings
      - run: cargo build --release --target aarch64-apple-darwin
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-aarch64
          path: target/aarch64-apple-darwin/release/chacha20_poly1305

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos-x86, build-macos-arm]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Determine next version
        id: version
        run: |
          latest_tag=$(git tag --list 'v*.*.*' --sort=-v:refname | head -n1)
          if [ -z "$latest_tag" ]; then
            version="0.1.0"
          else
            ver=${latest_tag#v}
            major=${ver%%.*}
            rest=${ver#*.}
            minor=${rest%%.*}
            minor=$((minor+1))
            version="$major.$minor.0"
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Upload linux asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux-x86_64/chacha20_poly1305
          asset_name: chacha20_poly1305-linux-x86_64
          asset_content_type: application/octet-stream
      - name: Upload macOS x86 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/macos-x86_64/chacha20_poly1305
          asset_name: chacha20_poly1305-macos-x86_64
          asset_content_type: application/octet-stream
      - name: Upload macOS ARM asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/macos-aarch64/chacha20_poly1305
          asset_name: chacha20_poly1305-macos-aarch64
          asset_content_type: application/octet-stream

