searchState.loadedDescShard("encryptor", 0, "ChaCha20-Poly1305 encryption utilities with an Argon2 key …\nConfiguration parameters for <code>derive_key</code>.\nNumber of bytes in the file header.\nFile header magic bytes identifying the ChaCha20-Poly1305 …\nCompute the ChaCha20 block keystream for the given counter …\nPerform a constant-time equality check.\nProvide conservative default parameters.\nDerive a ChaCha20 key from <code>password</code> and <code>salt</code> using …\nEncrypt or decrypt <code>data</code> returning a new <code>Vec&lt;u8&gt;</code>.\nEncrypt or decrypt <code>data</code> in place advancing <code>counter</code> as …\nError types used by the <code>encryptor</code> crate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLock memory to prevent swapping it to disk.\nMemory cost in kibibytes used by the KDF.\nDegree of parallelism.\nRead an entire file while using the same code path on …\nNumber of hashing passes.\nUnlock memory previously protected with <code>lock</code>.\nError produced by the Argon2 library.\nAuthentication tag verification failed during decryption.\nContains the error value\nErrors that can occur when using <code>encryptor</code>.\nInput was malformed or otherwise invalid.\nUnderlying I/O error kind when reading or writing files.\nContains the success value\nConvenient <code>Result</code> alias used throughout the crate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnable or disable verbose error output for conversions …")
